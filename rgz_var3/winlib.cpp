// *******************************************************************************************************
// winlib.cpp — Динамическая библиотека с функциями для работы с системными метриками и процессорными возможностями
//
// Эта библиотека предоставляет две экспортные функции:
// - numb_monitors_back() — возвращает количество подключённых мониторов
// - search_rdtsc() — проверяет поддержку процессором инструкции RDTSC через inline-ассемблер
//
// Особенности:
// - Используется `__declspec(dllexport)` для экспорта функций
// - Совместимость с Windows API через <windows.h>
// *******************************************************************************************************

#include <windows.h>  // Базовые функции Windows API

// *******************************************************************************************************
// Функция: numb_monitors_back
// Назначение: Возвращает количество подключённых мониторов
// Алгоритм:
// - Использует Windows API функцию GetSystemMetrics с параметром SM_CMONITORS
// Возвращаемое значение:
// - int — количество мониторов (0 или больше)
// *******************************************************************************************************
extern "C" __declspec(dllexport) int numb_monitors_back() {
    return GetSystemMetrics(SM_CMONITORS);  // Получение количества мониторов через системную метрику
}

// *******************************************************************************************************
// Функция: search_rdtsc
// Назначение: Проверяет поддержку процессором инструкции RDTSC (Read Time-Stamp Counter)
// Алгоритм:
// 1. Устанавливает EAX = 1 для запроса информации о возможностях процессора
// 2. Вызывает инструкцию CPUID для получения флагов возможностей
// 3. Проверяет бит 4 регистра EDX (бит RDTSC)
// 4. Возвращает 1, если RDTSC поддерживается, иначе 0
// *******************************************************************************************************
extern "C" __declspec(dllexport) int search_rdtsc() {
    int rdtsc;  // Переменная для хранения результата (0 или 1)

    __asm {
        mov eax, 1     ; EAX = 1: запрос информации о возможностях процессора
        cpuid          ; Вызов CPUID для получения флагов возможностей
        and edx, 10h   ; Маскирование бита 4 регистра EDX(RDTSC - флаг)
        shr edx, 4     ; Сдвиг результата вправо для получения значения 0 или 1
        mov rdtsc, edx ; Сохранение результата в переменную rdtsc
    }

    return rdtsc;  // Возврат результата (0 — не поддерживается, 1 — поддерживается)
}